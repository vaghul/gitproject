{
    "path": "/",
    "name": "json",
    "type": "folder",
    "children": [
        {
            "path": "/json",
            "name": ".DS_Store",
            "type": "file",
            "servertimestamp": "Mon Feb 16 2015 22:23:14 GMT+0530 (IST)",
            "localtimestamp": "Mon Feb 16 2015 22:24:12 GMT+0530 (IST)",
            "modified": "false",
            "index": 0,
            "parentId": "0"
        },
        {
            "path": "/json",
            "name": "committest.json",
            "type": "file",
            "servertimestamp": "00.00",
            "localtimestamp": "Mon Feb 16 2015 22:27:52 GMT+0530 (IST)",
            "modified": "true",
            "index": 1,
            "parentId": "0",
            "content": "",
            "commitnum": "118971031041171081061151111101"
        },
        {
            "path": "/json",
            "name": "jaj.txt",
            "type": "file",
            "servertimestamp": "Mon Feb 16 2015 22:23:14 GMT+0530 (IST)",
            "localtimestamp": "Mon Feb 16 2015 22:24:12 GMT+0530 (IST)",
            "modified": "false",
            "index": 2,
            "parentId": "0"
        },
        {
            "path": "/json",
            "name": "test.json",
            "type": "file",
            "servertimestamp": "Mon Feb 16 2015 22:23:14 GMT+0530 (IST)",
            "localtimestamp": "Mon Feb 16 2015 22:28:24 GMT+0530 (IST)",
            "modified": "true",
            "index": 3,
            "parentId": "0",
            "content": "",
            "commitnum": "118971031041171081061151111101"
        },
        {
            "path": "/json",
            "name": "vaghul",
            "type": "folder",
            "children": [
                {
                    "path": "/json/vaghul",
                    "name": ".DS_Store",
                    "type": "file",
                    "servertimestamp": "Mon Feb 16 2015 22:23:14 GMT+0530 (IST)",
                    "localtimestamp": "Mon Feb 16 2015 22:24:12 GMT+0530 (IST)",
                    "modified": "false",
                    "index": 0,
                    "parentId": "0"
                },
                {
                    "path": "/json/vaghul",
                    "name": "ab",
                    "type": "folder",
                    "children": [
                        {
                            "path": "/json/vaghul/ab",
                            "name": ".DS_Store",
                            "type": "file",
                            "servertimestamp": "Mon Feb 16 2015 22:23:14 GMT+0530 (IST)",
                            "localtimestamp": "Mon Feb 16 2015 22:24:12 GMT+0530 (IST)",
                            "modified": "false",
                            "index": 0,
                            "parentId": "0"
                        },
                        {
                            "path": "/json/vaghul/ab",
                            "name": "jaj.txt",
                            "type": "file",
                            "servertimestamp": "Mon Feb 16 2015 22:23:14 GMT+0530 (IST)",
                            "localtimestamp": "Mon Feb 16 2015 22:24:12 GMT+0530 (IST)",
                            "modified": "false",
                            "index": 1,
                            "parentId": "0"
                        },
                        {
                            "path": "/json/vaghul/ab",
                            "name": "pool",
                            "type": "folder",
                            "children": [
                                {
                                    "path": "/json/vaghul/ab/pool",
                                    "name": ".DS_Store",
                                    "type": "file",
                                    "servertimestamp": "Mon Feb 16 2015 22:23:14 GMT+0530 (IST)",
                                    "localtimestamp": "Mon Feb 16 2015 22:24:12 GMT+0530 (IST)",
                                    "modified": "false",
                                    "index": 0,
                                    "parentId": "0"
                                },
                                {
                                    "path": "/json/vaghul/ab/pool",
                                    "name": "sample.java",
                                    "type": "file",
                                    "servertimestamp": "Mon Feb 16 2015 22:23:14 GMT+0530 (IST)",
                                    "localtimestamp": "Mon Feb 16 2015 22:24:12 GMT+0530 (IST)",
                                    "modified": "false",
                                    "index": 1,
                                    "parentId": "0"
                                }
                            ],
                            "index": 2,
                            "parentId": "0"
                        }
                    ],
                    "index": 1,
                    "parentId": "0"
                },
                {
                    "path": "/json/vaghul",
                    "name": "harish",
                    "type": "folder",
                    "children": [
                        {
                            "path": "/json/vaghul/harish",
                            "name": ".DS_Store",
                            "type": "file",
                            "servertimestamp": "Mon Feb 16 2015 22:23:14 GMT+0530 (IST)",
                            "localtimestamp": "Mon Feb 16 2015 22:24:12 GMT+0530 (IST)",
                            "modified": "false",
                            "index": 0,
                            "parentId": "0"
                        },
                        {
                            "path": "/json/vaghul/harish",
                            "name": "jaj.txt",
                            "type": "file",
                            "servertimestamp": "Mon Feb 16 2015 22:23:14 GMT+0530 (IST)",
                            "localtimestamp": "Mon Feb 16 2015 22:24:12 GMT+0530 (IST)",
                            "modified": "false",
                            "index": 1,
                            "parentId": "0"
                        }
                    ],
                    "index": 2,
                    "parentId": "0"
                },
                {
                    "path": "/json/vaghul",
                    "name": "z",
                    "type": "folder",
                    "children": [],
                    "index": 3,
                    "parentId": "0"
                },
                {
                    "path": "/json/vaghul",
                    "name": "za",
                    "type": "folder",
                    "children": [],
                    "index": 4,
                    "parentId": "0"
                },
                {
                    "path": "/json/vaghul",
                    "name": "zzz",
                    "type": "folder",
                    "children": [],
                    "index": 5,
                    "parentId": "0"
                }
            ],
            "index": 4,
            "parentId": "0"
        },
        {
            "path": "/json",
            "name": "vaghul te.txt",
            "type": "file",
            "servertimestamp": "Mon Feb 16 2015 22:23:14 GMT+0530 (IST)",
            "localtimestamp": "Mon Feb 16 2015 22:25:59 GMT+0530 (IST)",
            "modified": "true",
            "index": 5,
            "parentId": "0",
            "content": "dGhpcyBpcyB2YWdodWwKCgphbmQgaGFyaXNo",
            "commitnum": "118971031041171081061151111101"
        }
    ],
    "commit": [
        {
            "commitno": "118971031041171081061151111101",
            "commitmsg": "first",
            "committime": "Mon Feb 16 2015 22:28:25 GMT+0530 (IST)"
        }
    ]
}